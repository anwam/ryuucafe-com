# # Sample workflow for building and deploying an Astro site to GitHub Pages
# #
# # To get started with Astro see: https://docs.astro.build/en/getting-started/
# #
# name: Deploy Astro site to S3

# on:
#   # Runs on pushes targeting the default branch
#   push:
#     branches: ["main"]

#   # Allows you to run this workflow manually from the Actions tab
#   workflow_dispatch:

# # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
# permissions:
#   contents: read
#   pages: write
#   id-token: write

# # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.

# env:
#   BUILD_PATH: "." # default value when not using subfolders
#   # BUILD_PATH: subfolder

# jobs:
#   build:
#     name: Build and Deploy
#     runs-on: ubuntu-latest
#     env:
#       DATOCMS_API_KEY: ${{ secrets.DATOCMS_API_KEY }}
#       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4
#       - name: Detect package manager
#         id: detect-package-manager
#         run: |
#           if [ -f "${{ github.workspace }}/yarn.lock" ]; then
#             echo "manager=yarn" >> $GITHUB_OUTPUT
#             echo "command=install" >> $GITHUB_OUTPUT
#             echo "runner=yarn" >> $GITHUB_OUTPUT
#             echo "lockfile=yarn.lock" >> $GITHUB_OUTPUT
#             exit 0
#           elif [ -f "${{ github.workspace }}/package.json" ]; then
#             echo "manager=npm" >> $GITHUB_OUTPUT
#             echo "command=ci" >> $GITHUB_OUTPUT
#             echo "runner=npx --no-install" >> $GITHUB_OUTPUT
#             echo "lockfile=package-lock.json" >> $GITHUB_OUTPUT
#             exit 0
#           else
#             echo "Unable to determine package manager"
#             exit 1
#           fi
#       - name: Setup Node
#         uses: actions/setup-node@v4
#         with:
#           node-version: "20"
#           cache: ${{ steps.detect-package-manager.outputs.manager }}
#           cache-dependency-path: ${{ env.BUILD_PATH }}/${{ steps.detect-package-manager.outputs.lockfile }}
#       - name: Install dependencies
#         run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
#         working-directory: ${{ env.BUILD_PATH }}
#       - name: Build with Astro
#         run: |
#           ${{ steps.detect-package-manager.outputs.runner }} astro build
#         working-directory: ${{ env.BUILD_PATH }}
#       - name: Deploy
#         uses: reggionick/s3-deploy@v4
#         with:
#           folder: ${{ env.BUILD_PATH }}/dist
#           bucket: ${{ secrets.S3_BUCKET }}
#           bucket-region: ${{ secrets.S3_BUCKET_REGION }}
#           dist-id: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
#           invalidation: /
#           delete-removed: true
#           no-cache: true
#           private: true
#           files-to-include: "{.*/**,**}"

name: Deploy Website

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      DATOCMS_API_KEY: ${{ secrets.DATOCMS_API_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.S3_BUCKET_REGION }}
      - name: Install modules
        run: npm ci
      - name: Build application
        run: npm run build
      - name: Deploy to S3
        run: aws s3 sync --delete ./dist/ s3://${{ secrets.S3_BUCKET }}
      - name: Create CloudFront invalidation
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
